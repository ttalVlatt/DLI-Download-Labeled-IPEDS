[
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "IPEDtaS Tutorial",
    "section": "",
    "text": "This page will walk you the basics of how to use IPEDtaS to automagically retrieve labelled IPEDS .dta files\n\n\n\n\nNCES provide all the information needed to create labelled IPEDS data\n\nHowever, it can be cumbersome to put all the pieces together manually\n\nIf you’ve worked with IPEDS before, you’ve likely seen this screen \nWhen I first started working with IPEDS, I assume the “Stata Data File” would be a nicely labelled data set, like you can get with other NCES data sets\n\nHowever, it’s not\nInstead, it’s just a plain .csv data set that is designed to be combined with the “STATA Program File” which applies the labels\n\nThese program files are also full of issues\n\nSuch as hard coded file paths from the NCES worker who wrote the script’s computer which you would have to update for each piece of data \nAnd error-causing line breaks which you’d have to fix before the script would run \n\n\nBetween downloading two files, fixing the issues, then running them together, it’s a lot of work so most people don’t bother\nPlus, they only work in Stata, R users without a Stata license are left out…\n\nThe R and Stata IPEDtaS scripts do all this heavy lifting for you so you can use nicely labelled IPEDS data without the extra effort!\n\n\n\n\nYou will see more of this in the applied example below, but, in short, they make data analysis much easier and reduce the amount you will have to look at the dictionary/codebook!\n\nLook at the difference from these simple data checks on the number of colleges in each region\n\n\nWithout labels, we just get the numeric code for each region which we’d have to look up\n\n\ndata_without_labels |&gt;\n  count(obereg)\n\n# A tibble: 10 × 2\n   obereg     n\n    &lt;dbl&gt; &lt;int&gt;\n 1      0     7\n 2      1   337\n 3      2  1025\n 4      3   891\n 5      4   491\n 6      5  1536\n 7      6   665\n 8      7   236\n 9      8   953\n10      9   148\n\n\n\nWith labels, we get a description of each region too\n\n\ndata_with_labels |&gt;\n  count(obereg)\n\n# A tibble: 10 × 2\n   obereg                                                             n\n   &lt;dbl+lbl&gt;                                                      &lt;int&gt;\n 1 0 [U.S. Service schools]                                           7\n 2 1 [New England (CT, ME, MA, NH, RI, VT)]                         337\n 3 2 [Mid East (DE, DC, MD, NJ, NY, PA)]                           1025\n 4 3 [Great Lakes (IL, IN, MI, OH, WI)]                             891\n 5 4 [Plains (IA, KS, MN, MO, NE, ND, SD)]                          491\n 6 5 [Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV)]  1536\n 7 6 [Southwest (AZ, NM, OK, TX)]                                   665\n 8 7 [Rocky Mountains (CO, ID, MT, UT, WY)]                         236\n 9 8 [Far West (AK, CA, HI, NV, OR, WA)]                            953\n10 9 [Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, VI)]    148\n\n\n\nFirst, this makes life easier reducing the amount we have to look back and forth to the code book\nSecond, it makes it easier to spot accidental errors when checking our work, leading to more reliable analyses\n\n\n\n\nFirst things first, let’s consider the what you will need on your computer to get started\n\n R Stata\n\n\n\nAn up-to-date version of R\n\nIf you’re not sure how up-to-date your R is, download a new version of R from https://cran.r-project.org\n\nAn up-to-date tidyverse package\n\nIn your R console type install.packages(\"tidyverse\") to get the latest version\n\nIf you want to download all of IPEDS, up to 12gb of permanent space and 36gb of temporary space\n\n\n\n\nAn up-to-date and licensed copy of Stata version 16.0 or higher (BE or Basic is sufficient)\n\nYou can upgrade/purchase/download Stata from https://www.stata.com\n\nAn up-to-date installation of Python\n\nDon’t fret, you don’t have to use Python, but the .do file uses PyStata to clean up the scripts, so Python just needs to be on your machine\nYou can see if you already have Python by typing python search into your Stata command box\nYou can install a copy of Python from https://www.python.org/downloads/\n\nIf you want to download all of IPEDS, up to 4gb of permanent space and 12gb of temporary space"
  },
  {
    "objectID": "tutorial.html#what-ipedtas-does",
    "href": "tutorial.html#what-ipedtas-does",
    "title": "IPEDtaS Tutorial",
    "section": "",
    "text": "NCES provide all the information needed to create labelled IPEDS data\n\nHowever, it can be cumbersome to put all the pieces together manually\n\nIf you’ve worked with IPEDS before, you’ve likely seen this screen \nWhen I first started working with IPEDS, I assume the “Stata Data File” would be a nicely labelled data set, like you can get with other NCES data sets\n\nHowever, it’s not\nInstead, it’s just a plain .csv data set that is designed to be combined with the “STATA Program File” which applies the labels\n\nThese program files are also full of issues\n\nSuch as hard coded file paths from the NCES worker who wrote the script’s computer which you would have to update for each piece of data \nAnd error-causing line breaks which you’d have to fix before the script would run \n\n\nBetween downloading two files, fixing the issues, then running them together, it’s a lot of work so most people don’t bother\nPlus, they only work in Stata, R users without a Stata license are left out…\n\nThe R and Stata IPEDtaS scripts do all this heavy lifting for you so you can use nicely labelled IPEDS data without the extra effort!"
  },
  {
    "objectID": "tutorial.html#why-would-i-want-labels-any",
    "href": "tutorial.html#why-would-i-want-labels-any",
    "title": "IPEDtaS Tutorial",
    "section": "",
    "text": "You will see more of this in the applied example below, but, in short, they make data analysis much easier and reduce the amount you will have to look at the dictionary/codebook!\n\nLook at the difference from these simple data checks on the number of colleges in each region\n\n\nWithout labels, we just get the numeric code for each region which we’d have to look up\n\n\ndata_without_labels |&gt;\n  count(obereg)\n\n# A tibble: 10 × 2\n   obereg     n\n    &lt;dbl&gt; &lt;int&gt;\n 1      0     7\n 2      1   337\n 3      2  1025\n 4      3   891\n 5      4   491\n 6      5  1536\n 7      6   665\n 8      7   236\n 9      8   953\n10      9   148\n\n\n\nWith labels, we get a description of each region too\n\n\ndata_with_labels |&gt;\n  count(obereg)\n\n# A tibble: 10 × 2\n   obereg                                                             n\n   &lt;dbl+lbl&gt;                                                      &lt;int&gt;\n 1 0 [U.S. Service schools]                                           7\n 2 1 [New England (CT, ME, MA, NH, RI, VT)]                         337\n 3 2 [Mid East (DE, DC, MD, NJ, NY, PA)]                           1025\n 4 3 [Great Lakes (IL, IN, MI, OH, WI)]                             891\n 5 4 [Plains (IA, KS, MN, MO, NE, ND, SD)]                          491\n 6 5 [Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA, WV)]  1536\n 7 6 [Southwest (AZ, NM, OK, TX)]                                   665\n 8 7 [Rocky Mountains (CO, ID, MT, UT, WY)]                         236\n 9 8 [Far West (AK, CA, HI, NV, OR, WA)]                            953\n10 9 [Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW, VI)]    148\n\n\n\nFirst, this makes life easier reducing the amount we have to look back and forth to the code book\nSecond, it makes it easier to spot accidental errors when checking our work, leading to more reliable analyses"
  },
  {
    "objectID": "tutorial.html#system-requirements",
    "href": "tutorial.html#system-requirements",
    "title": "IPEDtaS Tutorial",
    "section": "",
    "text": "First things first, let’s consider the what you will need on your computer to get started\n\n R Stata\n\n\n\nAn up-to-date version of R\n\nIf you’re not sure how up-to-date your R is, download a new version of R from https://cran.r-project.org\n\nAn up-to-date tidyverse package\n\nIn your R console type install.packages(\"tidyverse\") to get the latest version\n\nIf you want to download all of IPEDS, up to 12gb of permanent space and 36gb of temporary space\n\n\n\n\nAn up-to-date and licensed copy of Stata version 16.0 or higher (BE or Basic is sufficient)\n\nYou can upgrade/purchase/download Stata from https://www.stata.com\n\nAn up-to-date installation of Python\n\nDon’t fret, you don’t have to use Python, but the .do file uses PyStata to clean up the scripts, so Python just needs to be on your machine\nYou can see if you already have Python by typing python search into your Stata command box\nYou can install a copy of Python from https://www.python.org/downloads/\n\nIf you want to download all of IPEDS, up to 4gb of permanent space and 12gb of temporary space"
  },
  {
    "objectID": "tutorial.html#running-ipedtas-reading-data-joining-data",
    "href": "tutorial.html#running-ipedtas-reading-data-joining-data",
    "title": "IPEDtaS Tutorial",
    "section": "1. Running IPEDtaS, Reading Data, & Joining Data",
    "text": "1. Running IPEDtaS, Reading Data, & Joining Data\n\n R Stata\n\n\n1. Create a new folder on your computer, download a copy of IPEDtaS.R, and place it in the folder\n2. Adjust selected_files &lt;- c() in IPEDtaS.R to download the 3 files we want like below\n\nselected_files &lt;- c(\n  \"HD2021\",\n  \"EFFY2022\",\n  \"SFA2122\"\n)\n\n3. Select the whole IPEDtaS.R script and hit “Run”\n4. Start a new R script in that same folder\n5. Load tidyverse, haven (part of tidyverse, but requires loading separately), labelled (what haven uses behind the scenes), and gtsummary (to easily create output tables)\n\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(labelled)\nlibrary(gtsummary)\n\n6. Read our data in\n\ndata_info &lt;- read_dta(\"data/hd2021.dta\")\ndata_enroll &lt;- read_dta(\"data/effy2022.dta\")\ndata_aid &lt;- read_dta(\"data/sfa2122.dta\")\n\nOkay, now, take a look at the enrollment data we just read in (click on data_enroll in the environment in the top right)\n\n\n\nScreenshot of Enrollment Data Showing Variable Labels\n\n\nNotice the descriptions under each variable name\n\nIf you’re familiar with IPEDS data, you won’t be used to seeing those\nThey’re the variable labels we added, super useful for quick questions without having to open the code book!\n\n7. Now we want to join our data together\n\ndata &lt;- left_join(data_info, data_enroll, by = \"unitid\") |&gt;\n  left_join(data_aid, by = \"unitid\")\n\n\n\n1. Create a new folder on your computer, download a copy of IPEDtaS.do, and place it in the folder\n2. Adjust local selected_files in IPEDtaS.do to download the 3 files we want like below\n\nlocal selected_files ///\n  \"HD2021\" ///\n  \"EFFY2022\" ///\n  \"SFA2122\"\n\n3. Select the whole IPEDtaS.do script and hit “Run”\n4. Start a new Stata do file in that same folder\n5. Load our first data set, hd2022\n\nuse \"data/hd2021.dta\", clear\n\nOkay, now, take a look at the variables panel (by default in right hand panel)\n\nEach of the variables has a label that describes what the variable means\nIf you’re familiar with standard IPEDS data, you won’t be used to seeing those\nThey’re the variable labels we added, super useful for quick questions without having to open the code book!\n\n\n\n\nScreenshot of Showing Variable Labels\n\n\n6. Join in our other data sets in a “left join” style (i.e., all observations in the first data set are kept even if they don’t have a match in the second)\n\njoinby unitid using \"data/sfa2122.dta\", unmatched(master) _merge(sfa)\njoinby unitid using \"data/effy2022.dta\", unmatched(master) _merge(effy)"
  },
  {
    "objectID": "tutorial.html#data-cleaning-with-labels",
    "href": "tutorial.html#data-cleaning-with-labels",
    "title": "IPEDtaS Tutorial",
    "section": "2. Data Cleaning with Labels",
    "text": "2. Data Cleaning with Labels\nNow we have everything read in the advantage of the labels will truly begin to show!\n\n R Stata\n\n\n8. Some of you may have noticed that our data has become extremely “long”\n\nAs in, our data now has many more observations than we originally had\nThis we means we probably have a little light data-wrangling to do\nLet’s check how many observations our data set now contains\n\n\nnrow(data)\n\n[1] 116480\n\n\n\nI have a hunch that the data might be “long” by the variable effylev, so, let’s look at how many observations we have for each value of effylev\n\n\ndata |&gt; count(effylev)\n\n# A tibble: 5 × 2\n  effylev                                        n\n  &lt;dbl+lbl&gt;                                  &lt;int&gt;\n1 -2 [Not applicable, undergraduate detail] 102471\n2  1 [All students total]                     5953\n3  2 [Undergraduate]                          5680\n4  4 [Graduate]                               2040\n5 NA                                           336\n\n\nOnce again, if you’re used to IPEDS data, you wouldn’t usually see the information in the [square brackets]\n\nThese are our value labels, again, super useful for quick questions without having to open the code book!\nOne thing I really like about using labels is you get the best of both worlds\n\nWe still have the original values to check with the code book (which you don’t get with some tools we will discuss later)\n\n\nThe labels help us quickly identify what the different values of effylev mean and that if we are interested in undergraduate figures (which for now, we are) we want to keep rows that are effylev == 2\n\ndata &lt;- data |&gt; filter(effylev == 2)\n\n\n\n7. Some of you may have noticed that our data has become extremely “long”\n\nAs in, our data now has many more observations than we originally had\nThis we means we probably have a little light data-wrangling to do\nLet’s check how many observations our data set now contains\n\n\ncount\n\n  116,480\n\n\n\nI have a hunch that the data might be “long” by the variable effylev, so, let’s look at how many observations we have for each value of effylev\n\n\ntabulate effylev\n\n  Undergraduate or graduate level of |\n                             student |      Freq.     Percent        Cum.\n-------------------------------------+-----------------------------------\nNot applicable, undergraduate detail |    102,471       88.23       88.23\n                  All students total |      5,953        5.13       93.35\n                       Undergraduate |      5,680        4.89       98.24\n                            Graduate |      2,040        1.76      100.00\n-------------------------------------+-----------------------------------\n                               Total |    116,144      100.00\n\n\nOnce again, if you’re used to IPEDS data, you would usually see a bunch of numbers in the left-hand column, but now we see informative labels\n\nThese are our value labels, again, super useful for quick questions without having to open the code book!\n\nIf these are ever unclear, the data still contains the original values to check with the code book (which you don’t get with some tools we will discuss later)\nYou can use the command labelbook to check these\n\n\n\nlabelbook label_effylev\n\nValue label label_effylev \n---------------------------------------------------------------------------------------------------------------------------\n\n      Values                                    Labels\n       Range:  [-2,4]                    String length:  [8,36]\n           N:  4                 Unique at full length:  yes\n        Gaps:  yes                 Unique at length 12:  yes\n  Missing .*:  0                           Null string:  no\n                               Leading/trailing blanks:  no\n                                    Numeric -&gt; numeric:  no\n  Definition\n          -2   Not applicable, undergraduate detail\n           1   All students total\n           2   Undergraduate\n           4   Graduate\n\n   Variables:  effylev\n\n\nThe labels help us quickly identify what the different values of effylev mean and that if we are interested in undergraduate figures (which for now, we are) we want to keep rows that are effylev == 2\n\nkeep if effylev == 2\n\n(110,800 observations deleted)"
  },
  {
    "objectID": "tutorial.html#tables-with-labels",
    "href": "tutorial.html#tables-with-labels",
    "title": "IPEDtaS Tutorial",
    "section": "3. Tables with Labels",
    "text": "3. Tables with Labels\n\n R Stata\n\n\n9. Now let’s explore some trends in our data to show how labels can help. How does the percent of students paying out-of-state tuition vary by region?\n\ndata |&gt;\n  group_by(obereg) |&gt;\n  summarize(median_perc_out_of_state = median(scfa13p, na.rm = TRUE))\n\n# A tibble: 10 × 2\n   obereg                                                 median_perc_out_of_s…¹\n   &lt;dbl+lbl&gt;                                                               &lt;dbl&gt;\n 1 0 [U.S. Service schools]                                                    0\n 2 1 [New England (CT, ME, MA, NH, RI, VT)]                                    5\n 3 2 [Mid East (DE, DC, MD, NJ, NY, PA)]                                       5\n 4 3 [Great Lakes (IL, IN, MI, OH, WI)]                                        2\n 5 4 [Plains (IA, KS, MN, MO, NE, ND, SD)]                                     6\n 6 5 [Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN,…                      5\n 7 6 [Southwest (AZ, NM, OK, TX)]                                              4\n 8 7 [Rocky Mountains (CO, ID, MT, UT, WY)]                                   19\n 9 8 [Far West (AK, CA, HI, NV, OR, WA)]                                       4\n10 9 [Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, …                      0\n# ℹ abbreviated name: ¹​median_perc_out_of_state\n\n\nNotice how again the labels make our analysis instantly more informative\n\nWe know what obereg 7 means without going to the code book\nNow, if we want to just use the labels the column, haven has a handy tool for that as well as_factor()\n\nThis converts a column with value labels to a factor using the label as the value\n\n\n\ndata |&gt;\n  group_by(as_factor(obereg)) |&gt;\n  summarize(median_perc_out_of_state = median(scfa13p, na.rm = TRUE))\n\n# A tibble: 10 × 2\n   `as_factor(obereg)`                                    median_perc_out_of_s…¹\n   &lt;fct&gt;                                                                   &lt;dbl&gt;\n 1 U.S. Service schools                                                        0\n 2 New England (CT, ME, MA, NH, RI, VT)                                        5\n 3 Mid East (DE, DC, MD, NJ, NY, PA)                                           5\n 4 Great Lakes (IL, IN, MI, OH, WI)                                            2\n 5 Plains (IA, KS, MN, MO, NE, ND, SD)                                         6\n 6 Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA…                      5\n 7 Southwest (AZ, NM, OK, TX)                                                  4\n 8 Rocky Mountains (CO, ID, MT, UT, WY)                                       19\n 9 Far West (AK, CA, HI, NV, OR, WA)                                           4\n10 Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW,…                      0\n# ℹ abbreviated name: ¹​median_perc_out_of_state\n\n\n\n\n8. Now let’s explore some trends in our data to show how labels can help. How does the percent of students paying out-of-state tuition vary by region?\n\ntabstat scfa13p, s(median) by(obereg)\n\nSummary for variables: scfa13p\nGroup variable: obereg (Bureau of Economic Analysis (BEA) regions)\n\n          obereg |       p50\n-----------------+----------\nU.S. Service sch |         0\nNew England (CT, |         5\nMid East (DE, DC |         5\nGreat Lakes (IL, |         2\nPlains (IA, KS,  |         6\nSoutheast (AL, A |         5\nSouthwest (AZ, N |         4\nRocky Mountains  |        19\nFar West (AK, CA |         4\nOther U.S. juris |         0\n-----------------+----------\n           Total |         4\n----------------------------\n\n\nNotice how again the labels make our analysis instantly more informative\n\nWe know which region has 19% of students paying out-of-state tuition without going to the code book (it would previously just have said 7)"
  },
  {
    "objectID": "tutorial.html#plots-with-labels",
    "href": "tutorial.html#plots-with-labels",
    "title": "IPEDtaS Tutorial",
    "section": "4. Plots with Labels",
    "text": "4. Plots with Labels\n\n R Stata\n\n\n10. What about the relationship between total enrollment and the percent paying instate tuition? Are bigger schools relying more on out-of-state students? Does this trend vary by region?\n\nThis wouldn’t work in a table, so, let’s look at a simple scatter plot\n\n\nggplot(data |&gt; filter(efytotlt &lt; 50000),\n       aes(x = efytotlt,\n           y = scfa13p)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.8)) +\n  facet_wrap(~obereg)\n\n\n\n\n\n\n\nFigure 1\n\n\n\n\n\nOkay… But what do those variables mean?\n\nWithout labels, the plot it hard to understand\n\nSo, let’s add labels\n\nThe first step is to change facet_wrap(~obereg) to facet_wrap(~as_factor(obereg))\n\nThis is the same as we did in the table above, using a new version of the column that uses the value labels as the value\n\nThe second step involves pulling out the variable labels to go on the x and y axis\n\nThis is a little more manual, but, we can set our x and y labels using the labs() argument as normal\n\nBut instead of putting something like x = \"my x axis label\", we use the var_label() from the labelled package\n\n\n\n\nggplot(data |&gt; filter(efytotlt &lt; 50000),\n       aes(x = efytotlt,\n           y = scfa13p)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.8)) +\n  labs(x = var_label(data$efytotlt),\n       y = var_label(data$scfa13p)) +\n  facet_wrap(~as_factor(obereg))\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\nWell, that’s more informative, but a little messy\n\nWith a couple of tweaks to allow longer labels to wrap around, we now have a much better looking plot\n\ny = str_wrap(var_label(data$scfa13p), 40) says to make a new line every 40 characters on the y axis\nlabeller = label_wrap_gen(multi_line = TRUE) inside our facet_wrap() allows the facet labels to wrap onto multiple lines\n\n\n\nggplot(data |&gt; filter(efytotlt &lt; 50000),\n       aes(x = efytotlt,\n           y = scfa13p)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.8)) +\n  labs(x = var_label(data$efytotlt),\n       y = str_wrap(var_label(data$scfa13p), 40)) +\n  facet_wrap(~as_factor(obereg),\n             labeller = label_wrap_gen(multi_line = TRUE))\n\n\n\n\n\n\n\nFigure 3\n\n\n\n\n\n\n\n9. What about the relationship between total enrollment and the percent paying instate tuition? Are bigger schools relying more on out-of-state students? Does this trend vary by region?\n\nThis wouldn’t work in a table, so, let’s look at a simple scatter plot\n\n\nscatter scfa13p efytotlt if efytotlt &lt; 50000, by(obereg, col(2))\nquietly graph export scatter.svg, replace\n\n\n\nSee how by default the x, y, and by/facet labels use the labels and not the variable names/values?\n\nThis instantly makes your plots more intuitive\n\nI don’t typically use Stata for plotting, so I’m not sure how to get the longer labels to wrap, but I’m sure there’s a way"
  },
  {
    "objectID": "tutorial.html#models-with-labels",
    "href": "tutorial.html#models-with-labels",
    "title": "IPEDtaS Tutorial",
    "section": "5. Models with Labels",
    "text": "5. Models with Labels\n\n R Stata\n\n\n11. Lastly, let’s look at how labels can show up in modeling. Let’s see if the percentage of students paying out of state changes by the level of the institution (4 year, 2 year, Less than 2 year)\n\nmodel &lt;- lm(scfa13p ~ factor(iclevel),\n            data = data)\n\ntbl_regression(model)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI\n1\np-value\n\n\n\n\nfactor(iclevel)\n\n\n\n\n\n\n\n\n    1\n—\n—\n\n\n\n\n    2\n-8.7\n-9.9, -7.4\n&lt;0.001\n\n\n    3\n-14\n-21, -7.6\n&lt;0.001\n\n\n\n1\nCI = Confidence Interval\n\n\n\n\n\n\n\n\nWithout using labels, the regression output needs the code book to interpret\n\nWhat is iclevel 2?\n\nRemember from above, using as_factor() rather than factor() tells R to use the labels as the levels\n\nmodel &lt;- lm(scfa13p ~ as_factor(iclevel),\n            data = data)\n\ntbl_regression(model)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI\n1\np-value\n\n\n\n\nas_factor(iclevel)\n\n\n\n\n\n\n\n\n    Four or more years\n—\n—\n\n\n\n\n    At least 2 but less than 4 years\n-8.7\n-9.9, -7.4\n&lt;0.001\n\n\n    Less than 2 years (below associate)\n-14\n-21, -7.6\n&lt;0.001\n\n\n\n1\nCI = Confidence Interval\n\n\n\n\n\n\n\n\nOkay that is much clearer what is going on!\n\nas_factor(iclevel) is still a bit messy though\nSimilarly to the plot above, using variable labels is a little more tricky, but, we can do it using the var_label() function again alongside the label = argument in tbl_regression\n\n\ntbl_regression(model,\n               label = list(`as_factor(iclevel)` = var_label(data$iclevel)))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI\n1\np-value\n\n\n\n\nLevel of institution\n\n\n\n\n\n\n\n\n    Four or more years\n—\n—\n\n\n\n\n    At least 2 but less than 4 years\n-8.7\n-9.9, -7.4\n&lt;0.001\n\n\n    Less than 2 years (below associate)\n-14\n-21, -7.6\n&lt;0.001\n\n\n\n1\nCI = Confidence Interval\n\n\n\n\n\n\n\n\n\n\n10. Lastly, let’s look at how labels can show up in modeling. Let’s see if the percentage of students paying out of state changes by the level of the institution (4 year, 2 year, Less than 2 year)\n\nregress scfa13p i.iclevel\n\n      Source |       SS           df       MS      Number of obs   =     1,572\n-------------+----------------------------------   F(2, 1569)      =     98.14\n       Model |  30433.0627         2  15216.5313   Prob &gt; F        =    0.0000\n    Residual |  243262.532     1,569  155.043041   R-squared       =    0.1112\n-------------+----------------------------------   Adj R-squared   =    0.1101\n       Total |  273695.595     1,571  174.217438   Root MSE        =    12.452\n\n------------------------------------------------------------------------------------------------------\n                             scfa13p | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------------------------------+----------------------------------------------------------------\n                             iclevel |\n   At least 2 but less than 4 years  |  -8.666799   .6320687   -13.71   0.000    -9.906587   -7.427011\nLess than 2 years (below associate)  |  -14.21038    3.35951    -4.23   0.000    -20.79999    -7.62078\n                                     |\n                               _cons |   14.21038   .4602254    30.88   0.000     13.30766     15.1131\n------------------------------------------------------------------------------------------------------\n\n\nAs you can see, the variable labels automatically show up in our regression output\n\nBefore, you would have seen 2 and 3 in the iclevel column, but now you get informative labels\nWith the labels, it’s easier to interpret which makes you work easier to read and also less likely you will get mixed up and report the wrong value!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IPEDtaS: Automagically Download Labeled .dta IPEDS Files in Stata and R",
    "section": "",
    "text": "IPEDtaS: Automagically Download Labeled .dta IPEDS Files in Stata and R\n\nThis project contains Stata and R scripts that ‘automagically’ download labeled versions of IPEDS complete data files\n\nIn the Stata implementation it simply downloads the data, .do file, and dictionary and after cleaning up any issues, uses the .do file IPEDS provide to add data labels\nIn the R implementation the .do file is read as text into R then converted to labeling instructions passed to the haven R package\n\nFor detailed instructions on using the package, check out the tutorial page\n\nThe logic of using both scripts is very similar\n\nDownloads from the IPEDS complete data files page\n\nThe “Stata Data” .csv file\nThe “Stata Program” .do file\nThe Data Dictionary (saved to dictionaries folder e.g., dictionaries/hd2021.xlsx)\n\nCorrects the file paths and problematic lines in the program files\nUses the corrected files to apply labels to the IPEDS data\nSaves result as a .dta file in the data folder e.g. data/hd2021.dta\n\nInstructions in brief:\n\nPlace either IPEDtaS.do (for Stata projects) or IPEDtaS.R (for R projects) in your main project folder\nEdit the selected_files list to the IPEDS complete data files you need\n\n\nBy default the script will download the entirity of IPEDS, which takes multiple hours and around 10gb\nYou can either delete or comment out any files you don’t want. Simply download the script from here again if you need the full list back.\n\n\nHit “do” or “run”\nAfter it’s completed, both result in a data/ folder containing labeled .dta files and a dictionaries/ folder with the matching dictionaries\n\n\nThe project is intended to both make IPEDS data files easier to work with and also enhance reproducibility of research using IPEDS\n\nI encourage you to include a copy of the IPEDtaS script you use in your analyses in any code you share for reproduction\n\nIf you do so, please cite the repository so others can easily find and use it: \n\n\n\nCapaldi, M. J. (2024). IPEDtaS: Automagically Download Labeled .dta IPEDS Files in Stata and R (Version 0.1) [Computer software]. https://doi.org/10.5281/zenodo.13388846"
  }
]