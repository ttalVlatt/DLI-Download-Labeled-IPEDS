[
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "IPEDtaS Tutorial",
    "section": "",
    "text": "IPEDtaS Tutorial\n\nThis page will walk you the basics of how to use IPEDtaS to automagically retrieve labelled IPEDS .dta files\nNCES provide all the information needed to create labelled IPEDS data\nFor Stata users, there is a reasonable amount of cleaning work to make the scripts run\nFor R users, there is no direct way of getting labelled IPEDS data\nThese scripts automate the process so you simply have\n\n\nSelect the files you need\nHit “run” or “do”\n\n\nThe R and Stata scripts are essentially the same the in terms of what they do\nThe instructions are mostly the same, but a few details are specific to each language\nWhere things differ, you will see it separated into tabs below\n\n\n\nSystem Requirements\nFirst things first, let’s consider the what you will need on your computer to get started\n\n R Stata\n\n\n\nAn up-to-date version of R\n\n\nIf you’re not sure how up-to-date your R is, download a new version of R from https://cran.r-project.org\n\n\nAn up-to-date tidyverse package\n\n\nIn your R console type install.packages(\"tidyverse\") to get the latest version\n\n\nUp to 11.58gb of space (if you want to store the whole of IPEDS, most of you won’t)\n\n\n\n\nAn up-to-date installation of Python\n\n\nDon’t fret, you don’t have to use Python, but the .do file uses PyStata to clean up the scripts, so Python just needs to be on your machine\nYou can see if you already have Python by typing python search into your Stata command box\nYou can install a copy of Python from https://www.python.org/downloads/\n\n\nAn up-to-date and licensed copy of Stata version 16.0 or higher (BE or Basic is sufficient)\n\n\nYou can upgrade/purchase/download Stata from https://www.stata.com\n\n\nUp to 4.01gb of space (if you want to store the whole of IPEDS, most of you won’t)\n\n\n\n\n\n\nSetting up Your Project Folder\nThis part is identical for both Stata and R users, the main points to note are:\n\nWherever you place the IPEDtaS.do or IPEDtaS.R file will be treated as “home” or the “working directory” a.k.a. .\n\n\nWhen the script runs it will store output in ./data and ./dictionaries\nCaution: Anything you have in folders with that name will be overwritten\nThis also applies to ./zip-data, ./zip-do-files, ./zip-dictionaries, ./unzip-data, ./unzip-do-files, ./unzip-dictionaries which are folders used temporarily behind-the-scenes\n\n\nPersonally, I set up my projects with scripts in the top-level of the project folder (as in, not in a sub-folder), so that is how IPEDtaS was designed\n\n\nIf you need everything in a sub-folder for sanity reasons either:\n\n\nPlace IPEDtaS in your data folder (e.g ./data/IPEDtaS.do) which will place the data in ./data/data/hd2022.dta\nPlace IPEDtaS in your scripts folder and go through adjusting all the relative paths by adding ../ to back out one level\n\n\n\nFile Selection\nThe only real change you have to make in the whole process is to the scripts is selecting which files you want to download\n\nBy default the scripts will download every single file in IPEDS\nThis might be something you want to do once, however, probably not every time you use them\nThe basic premise is the same: comment out or delete the file names you don’t want\nIn the tabs below, I will outline how the most efficient way of doing this in each language\nNote: While the script has all files listed in chronological order and then by the order they appear at https://nces.ed.gov/ipeds/datacenter/DataFiles.aspx, this is arbritrary\nYou could list files in any order you like, it’s just the order they will be downloaded in\n\n\n R Stata\n\n\n\nThe only rule is that the selected_files &lt;- c() must be a valid list of IPEDS file names\nEach line/entry must end in a comma , except the final one\nIn R, there is no code for a multi-line comment, you need a # at the start of each line to comment it out\nIf you’re using RStudio to run R, you can comment out multiple lines at once by\n\n\nHighlight the file names you want to comment or un-comment\nUse the keyboard shortcut\n\n\n\nMac: Commmand + Shift + C\n\nWindows: Control + Shift + C\n\nHere are some short examples of file selection\n\nYou can delete all the files you don’t want and leave a simple list\n\n\nThis is probably the easiest if you’re only downloading a small number of files\n\n\nselected_files &lt;- c(\n  \"HD2021\",\n  \"EFFY2022\",\n  \"SFA2122\"\n)\n\n\nYou can comment out files you don’t want from list already in the file\n\n\nselected_files &lt;- c(\n  \"HD2021\",\n  # \"IC2022\",\n  # \"IC2022_AY\",\n  \"EFFY2022\",\n  # \"EFFY2022_DIST\",\n  \"SFA2122\"\n)\n\nThat’s about it, when you run the script, the files you put in selected_files will be downloaded\n\n\n\nFor the Stata version local selected_files needs to be a valid list, there are a few more rules than in R\nEach line in the list must end in /// except the final one\nStata has both single-line comments // or * and multi-line commments which start /* and end */\nMulti-line comments make it easier to comment out large blocks like we want to do here\nTo work in the list, the line before a multi-line comment must be /// and nothing else\nBelow this start the first line of a multi-line comment with /*\nIf you don’t want anything below that line, just leave it, there is a */ at the end of the list anyway\nTo close out a multi-line commment somewhere else use */\nYou can also just comment out lines you don’t want with // or * at the start of each line or just delete any file names you don’t want\n\nHere are some short examples of file selection\n\nYou can delete all the files you don’t want and leave a simple list\n\n\nThis is probably the easiest if you’re only downloading a small number of files\n\n\nlocal selected_files ///\n  \"HD2021\" ///\n  \"EFFY2022\" ///\n  \"SFA2122\"\n\n\nYou can comment out files you don’t want from list already in the file using single-line comments\n\n\nlocal selected_files ///\n  \"HD2021\" ///\n  // \"IC2022\" ///\n  // \"IC2022_AY\" ///\n  \"EFFY2022\" ///\n  //  \"EFFY2022_DIST\" ///\n  \"SFA2122\"\n\nWhich is the same as\n\nlocal selected_files ///\n  \"HD2021\" ///\n  * \"IC2022\" ///\n  * \"IC2022_AY\" ///\n  \"EFFY2022\" ///\n  *  \"EFFY2022_DIST\" ///\n  \"SFA2122\"\n\n\nUse multi-line comments to comment out files you don’t want\n\n\nlocal selected_files ///\n  \"HD2021\" ///\n  ///\n  /*\n  \"IC2022\" ///\n  \"IC2022_AY\" ///\n  */\n  \"EFFY2022\" ///\n  ///\n  /*\n  \"EFFY2022_DIST\" ///\n  */\n  \"SFA2122\"\n\nThat’s about it, when you run the script, the files you put in local selected_files will be downloaded\n\n\n\n\n\nRunnning the Script\nOnce you have the file selection set, simply save the script and hit run/do!\nIf you’re using this tool as part of a reproducible research project, you might want to include running it as part of your analysis code\n\nHowever, you don’t want to run it every time you run your code, only if the data isn’t already downloaded\nThe below code blocks will do exactly that if you include them at the start of your analysis code\nJust change hd2021.dta to a file you download\n\n\n R Stata\n\n\n\nif(!file.exists(\"data/hd2021.dta\")) { source(\"IPEDtaS.R\") }\n\n\n\n\nif(!fileexists(\"data/hd2021.dta\")) { do \"IPEDtaS.do\" }\n\n\n\n\n\n\nWorking with Labeled IPEDS Data\nOkay, now we have our labelled IPEDS data, let’s walk through a simple descriptive analysis using\n\nHD2021 (institutional characteristics as of Fall 2021)\nEFFY2022 (enrollment for 2021-2022 school year)\nSFA2022 (financial aid for 2021-2022 school year)\n\n\n R Stata\n\n\n\nStart a new project folder, download a copy of IPEDtaS.R, and place it in the folder\nAdjust selected_files &lt;- c() to download the 3 files we want\n\n\nselected_files &lt;- c(\n  \"HD2021\",\n  \"EFFY2022\",\n  \"SFA2122\"\n)\n\n\nHit “Run”\nLoad tidyverse and haven (part of tidyverse, but requires loading separately)\n\n\nlibrary(tidyverse)\nlibrary(haven)\n\n\nRead our data in\n\n\ndata_info &lt;- read_dta(\"data/hd2021.dta\")\ndata_enroll &lt;- read_dta(\"data/effy2022.dta\")\ndata_aid &lt;- read_dta(\"data/sfa2122.dta\")\n\nOkay, now, take a look at the data_info we just read in\n\nDo you see the descriptions under each variable name?\nIf you’re familiar with IPEDS, you won’t be used to seeing those\nThey’re the variable labels we added, super useful for quick questions without having to open the code book!\n\n\nHmm, data_enroll is much “longer” than our other 2 data frames, we means we probably have a little light data-wrangling to do\n\n\nI have a hunch that the data might be “long” by the variable EFFYLEV, so, let’s look at how many observations we have for each value of that\n\n\ndata_enroll |&gt;\n  count(effylev)\n\n# A tibble: 4 × 2\n  effylev                                        n\n  &lt;dbl+lbl&gt;                                  &lt;int&gt;\n1 -2 [Not applicable, undergraduate detail] 103690\n2  1 [All students total]                     6036\n3  2 [Undergraduate]                          5758\n4  4 [Graduate]                               2059\n\n\nOnce again, note how get labels in addition to the effylev values!\n\nThis is the best of both worlds,\nWe still have the original values to check with the codebook (which you don’t get with some tools we will discuss later)\nThe labels help us quickly identify that we want to just keep effylev == 2 for undergraduate students\n\n\ndata_enroll &lt;- data_enroll |&gt;\n  filter(effylev == 2)\n\n\nNow we want to join our data together\n\n\ndata &lt;- left_join(data_info, data_enroll, by = \"unitid\") |&gt;\n  left_join(data_aid, by = \"unitid\")\n\n\nNow let’s start exploring some basic trends to illustrate how labels can help\n\n\nHow does the percent paying in-state tuition vary by region?\n\n\ndata |&gt;\n  group_by(obereg) |&gt;\n  summarize(median_perc_out_of_state = median(scfa13p, na.rm = TRUE))\n\n# A tibble: 10 × 2\n   obereg                                                 median_perc_out_of_s…¹\n   &lt;dbl+lbl&gt;                                                               &lt;dbl&gt;\n 1 0 [U.S. Service schools]                                                    0\n 2 1 [New England (CT, ME, MA, NH, RI, VT)]                                    5\n 3 2 [Mid East (DE, DC, MD, NJ, NY, PA)]                                       5\n 4 3 [Great Lakes (IL, IN, MI, OH, WI)]                                        2\n 5 4 [Plains (IA, KS, MN, MO, NE, ND, SD)]                                     6\n 6 5 [Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN,…                      5\n 7 6 [Southwest (AZ, NM, OK, TX)]                                              4\n 8 7 [Rocky Mountains (CO, ID, MT, UT, WY)]                                   19\n 9 8 [Far West (AK, CA, HI, NV, OR, WA)]                                       4\n10 9 [Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, …                      0\n# ℹ abbreviated name: ¹​median_perc_out_of_state\n\n\n\nNotice how again the labels make our analysis instantly more informative, we know what obereg 3 actually means without going to the code book\nNow, if we want to just use the labels as the variable in the graph, haven has a handy tool for that as well as_factor()\nThis converts a column with value labels to a factor using the label as the value\n\n\ndata |&gt;\n  group_by(as_factor(obereg)) |&gt;\n  summarize(median_perc_out_of_state = median(scfa13p, na.rm = TRUE))\n\n# A tibble: 10 × 2\n   `as_factor(obereg)`                                    median_perc_out_of_s…¹\n   &lt;fct&gt;                                                                   &lt;dbl&gt;\n 1 U.S. Service schools                                                        0\n 2 New England (CT, ME, MA, NH, RI, VT)                                        5\n 3 Mid East (DE, DC, MD, NJ, NY, PA)                                           5\n 4 Great Lakes (IL, IN, MI, OH, WI)                                            2\n 5 Plains (IA, KS, MN, MO, NE, ND, SD)                                         6\n 6 Southeast (AL, AR, FL, GA, KY, LA, MS, NC, SC, TN, VA…                      5\n 7 Southwest (AZ, NM, OK, TX)                                                  4\n 8 Rocky Mountains (CO, ID, MT, UT, WY)                                       19\n 9 Far West (AK, CA, HI, NV, OR, WA)                                           4\n10 Other U.S. jurisdictions (AS, FM, GU, MH, MP, PR, PW,…                      0\n# ℹ abbreviated name: ¹​median_perc_out_of_state\n\n\n\nWhat about the relationship between total enrollment and the percent paying instate tuition? Are bigger schools relying more on out-of-state students?\n\n\nThis wouldn’t work in a table, so, let’s look at a simple scatter plot\n\n\nggplot(data |&gt; filter(efytotlt &lt; 50000),\n       aes(x = efytotlt,\n           y = scfa13p)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.8)) +\n  facet_wrap(~obereg)\n\n\n\n\n\n\n\n\n\nOkay… But what do those variables mean?\nUnfortunately, with continuous variables there isn’t something quite as nice as as_factor() but, we can set our x and y labels using the var_label() from the labelled package (a dependency of haven)\n\n\nlibrary(labelled)\n\nggplot(data |&gt; filter(efytotlt &lt; 50000),\n       aes(x = efytotlt,\n           y = scfa13p)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.8)) +\n  labs(x = var_label(data$efytotlt),\n       y = var_label(data$scfa13p)) +\n  facet_wrap(~as_factor(obereg))\n\n\n\n\n\n\n\n\n\nWith a couple of tweaks to allow longer labels to wrap around, we now have a much better looking plot\n\n\nggplot(data |&gt; filter(efytotlt &lt; 50000),\n       aes(x = efytotlt,\n           y = scfa13p)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.8)) +\n  labs(x = var_label(data$efytotlt),\n       y = str_wrap(var_label(data$scfa13p), 40)) +\n  facet_wrap(~as_factor(obereg),\n             labeller = label_wrap_gen(multi_line = TRUE))\n\n\n\n\n\n\n\n\n\nLastly, let’s look at how labels can show up in modeling\n\n\nWithout using labels, the regression output needs the codebook to interpret\n\n\nlibrary(gtsummary)\n\nmodel &lt;- lm(scfa13p ~ factor(iclevel),\n            data = data)\n\ntbl_regression(model)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI\n1\np-value\n\n\n\n\nfactor(iclevel)\n\n\n\n\n\n\n\n\n    1\n—\n—\n\n\n\n\n    2\n-8.7\n-9.9, -7.4\n&lt;0.001\n\n\n    3\n-14\n-21, -7.6\n&lt;0.001\n\n\n\n1\nCI = Confidence Interval\n\n\n\n\n\n\n\n\n\nRemember, using as_factor() rather than factor() tells R to use the labels as the levels\nSimilarly to the plot, using variable labels is a little more tricky, but, we can do it using the var_label() function again\n\n\nmodel &lt;- lm(scfa13p ~ as_factor(iclevel),\n            data = data)\n\ntbl_regression(model,\n               label = list(`as_factor(iclevel)` = var_label(data$iclevel)))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI\n1\np-value\n\n\n\n\nLevel of institution\n\n\n\n\n\n\n\n\n    Four or more years\n—\n—\n\n\n\n\n    At least 2 but less than 4 years\n-8.7\n-9.9, -7.4\n&lt;0.001\n\n\n    Less than 2 years (below associate)\n-14\n-21, -7.6\n&lt;0.001\n\n\n\n1\nCI = Confidence Interval"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IPEDtaS: Automagically Download Labeled .dta IPEDS Files in Stata and R",
    "section": "",
    "text": "IPEDtaS: Automagically Download Labeled .dta IPEDS Files in Stata and R\n\nThis project contains Stata and R scripts that ‘automagically’ download labeled versions of IPEDS complete data files\n\nIn the Stata implementation it simply downloads the data, .do file, and dictionary and after cleaning up any issues, uses the .do file IPEDS provide to add data labels\nIn the R implementation the .do file is read as text into R then converted to labeling instructions passed to the haven R package\n\nThe logic of using both scripts is very similar\n\nPlace either IPEDtaS.do (for Stata projects) or IPEDtaS.R (for R projects) in your main project folder\nEdit the selected_files list to the IPEDS complete data files you need\n\n\nBy default the script will download the entirity of IPEDS, which takes multiple hours and around 10gb\nYou can either delete or comment out any files you don’t want. Simply download the script from here again if you need the full list back.\n\n\nHit “do” or “run”\nAfter it’s completed, both result in a data/ folder containing labeled .dta files and a dictionaries/ folder with the matching dictionaries\n\nThe project is intended to both make IPEDS data files easier to work with and also enhance reproducibility of research using IPEDS\n\nI encourage you to include a copy of the IPEDtaS script you use in your analyses in any code you share for reproduction\n\nIf you do so, please cite the repository so others can easily find and use it: \n\n\n\nCapaldi, M. J. (2024). IPEDtaS: Automagically Download Labeled .dta IPEDS Files in Stata and R (Version 0.1) [Computer software]. https://doi.org/10.5281/zenodo.13388846\n\n\nHints - In R, use as_factor() from haven library to convert a labeled column to a factor which uses the labels as the levels"
  }
]